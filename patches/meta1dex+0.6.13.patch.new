diff --git a/node_modules/meta1dex/dist/bitshares.js b/node_modules/meta1dex/dist/bitshares.js
index bd49731..403c733 100644
--- a/node_modules/meta1dex/dist/bitshares.js
+++ b/node_modules/meta1dex/dist/bitshares.js
@@ -36,6 +36,7 @@ var _lzmaDMin = require("lzma/src/lzma-d-min");
 var _bignumber = _interopRequireDefault(require("bignumber.js"));
 
 var _meta1js = require("meta1js");
+var _meta1jsWs = require("meta1js-ws");
 
 var Meta1 = /*#__PURE__*/function () {
   (0, _createClass2.default)(Meta1, null, [{
@@ -194,41 +195,68 @@ var Meta1 = /*#__PURE__*/function () {
             genPubKey,
             account,
             _args4 = arguments;
-        return _regenerator.default.wrap(function _callee4$(_context4) {
-          while (1) {
-            switch (_context4.prev = _context4.next) {
-              case 0:
-                feeSymbol = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : Meta1.chain.core_asset;
-                _context4.next = 3;
-                return Meta1.accounts[accountName];
+            return _regenerator.default.wrap(async function _callee4$(_context4) {
+              while (1) {
+                switch (_context4.prev = _context4.next) {
+                  case 0:
+                    feeSymbol = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : Meta1.chain.core_asset;
+                    _context4.next = 3;
+                    return Meta1.accounts[accountName];
+    
+                  case 3:                
+                    acc = _context4.sent;
+                    acc = await _meta1jsWs.Apis.db.get_account_by_name(accountName);
+    
+                    activeKey = _meta1js.PrivateKey.fromSeed("".concat(accountName, "active").concat(password)); // in case of password login
+                    genPubKey = activeKey.toPublicKey().toString();
+    
+                    var pass_val = acc.active.key_auths.filter( key => {
+                      return genPubKey == key[0];
+                    });
+    
+                    if (pass_val.length > 0) {
+                      _context4.next = 8;
+                      break;
+                    }
     
-              case 3:
-                acc = _context4.sent;
-                activeKey = _meta1js.PrivateKey.fromSeed("".concat(accountName, "active").concat(password));
-                genPubKey = activeKey.toPublicKey().toString();
+                    activeKey = _meta1js.PrivateKey.fromWif(password); // in case of wif private key login
+                    genPubKey = activeKey.toPublicKey().toString();
     
-                if (!(genPubKey != acc.active.key_auths[0][0])) {
-                  _context4.next = 8;
-                  break;
-                }
+                    var active_val = acc.active.key_auths.filter( key => { // active private key check
+                      return genPubKey == key[0];
+                    });
     
-                throw new Error("The pair of login and password do not match!");
+                    if (active_val.length > 0) {
+                      _context4.next = 8;
+                      break;
+                    }
     
-              case 8:
-                account = new Meta1(accountName, activeKey.toWif(), feeSymbol);
-                account.setMemoKey((acc.options.memo_key === genPubKey ? activeKey : _meta1js.PrivateKey.fromSeed("".concat(accountName, "memo").concat(password))).toWif());
-                _context4.next = 12;
-                return account.initPromise;
+                    var owner_val = acc.owner.key_auths.filter( key => { // owner private key check
+                      return genPubKey == key[0];
+                    });
     
-              case 12:
-                return _context4.abrupt("return", account);
+                    if (owner_val.length > 0) {
+                      _context4.next = 8;
+                      break;
+                    }
     
-              case 13:
-              case "end":
-                return _context4.stop();
-            }
-          }
-        }, _callee4);
+                    throw new Error("The pair of login and password do not match!");
+    
+                  case 8:
+                    account = new Meta1(accountName, activeKey.toWif(), feeSymbol);
+                    account.setMemoKey((acc.options.memo_key === genPubKey ? activeKey : _meta1js.PrivateKey.fromSeed("".concat(accountName, "memo").concat(password))).toWif());
+                    _context4.next = 12;
+                    return account.initPromise;
+    
+                  case 12:
+                    return _context4.abrupt("return", account);
+    
+                  case 13:
+                  case "end":
+                    return _context4.stop();
+                }
+              }
+            }, _callee4);
       }));
 
       function login(_x2, _x3) {
@@ -1186,7 +1214,7 @@ var Meta1 = /*#__PURE__*/function () {
   return Meta1;
 }();
 
-(0, _defineProperty2.default)(Meta1, "node", "wss://api.meta1.io/ws");
+(0, _defineProperty2.default)(Meta1, "node", "wss://api.meta-exchange.vision/ws");
 (0, _defineProperty2.default)(Meta1, "autoreconnect", true);
 (0, _defineProperty2.default)(Meta1, "logger", console);
 (0, _defineProperty2.default)(Meta1, "subscribe", _event.default.subscribe);
@@ -1196,3 +1224,4 @@ _event.default.init(Meta1);
 
 var _default = Meta1;
 exports.default = _default;
+
